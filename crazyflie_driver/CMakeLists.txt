cmake_minimum_required(VERSION 3.5)
project(crazyflie_driver)

# Add support for C++11
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 11)
endif()

find_package(ament_cmake REQUIRED)

set(INCLUDE_DIRS ${ament_cmake_INCLUDE_DIRS})
include_directories(${INCLUDE_DIRS})

set(LIBRARY_DIRS ${ament_cmake_LIBRARY_DIRS})

link_directories(${LIBRARY_DIRS})

set(LIBS ${ament_cmake_LIBRARIES})

# Add support for C++11
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 11)
endif()

find_package(ament_cmake REQUIRED)

set(INCLUDE_DIRS ${ament_cmake_INCLUDE_DIRS})

set(LIBRARY_DIRS ${ament_cmake_LIBRARY_DIRS})

set(LIBS ${ament_cmake_LIBRARIES})

set(CMAKE_CXX_STANDARD 14)

find_package(ament_cmake REQUIRED)
find_package(rosidl_default_generators REQUIRED)
find_package(rclcpp REQUIRED)
find_package(builtin_interfaces REQUIRED)
find_package(std_msgs REQUIRED)
find_package(std_srvs REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(tf2 REQUIRED)
find_package(crazyflie_cpp REQUIRED)

################################################
## Declare ROS messages, services and actions ##
################################################

rosidl_generate_interfaces(${PROJECT_NAME} "msg/LogBlock.msg"
  "msg/GenericLogData.msg" "msg/FullState.msg" "msg/VelocityWorld.msg"
  "msg/TrajectoryPolynomialPiece.msg" "msg/CrtpPacket.msg" "msg/Hover.msg"
  "msg/Position.msg" "srv/AddCrazyflie.srv" "srv/GoTo.srv" "srv/Land.srv"
  "srv/NotifySetpointsStop.srv" "srv/RemoveCrazyflie.srv" "srv/SetGroupMask.srv"
  "srv/StartTrajectory.srv" "srv/Stop.srv" "srv/Takeoff.srv"
  "srv/UpdateParams.srv" "srv/UploadTrajectory.srv" "srv/SendPacket.srv"
  DEPENDENCIES builtin_interfaces std_msgs std_srvs geometry_msgs sensor_msgs)

###########
## Build ##
###########

add_executable(crazyflie_server src/crazyflie_server.cpp)
target_link_libraries(crazyflie_server crazyflie_cpp::crazyflie_cpp)
ament_target_dependencies(crazyflie_server rclcpp std_msgs std_srvs
  builtin_interfaces geometry_msgs sensor_msgs)

add_executable(crazyflie_add src/crazyflie_add.cpp)

ament_target_dependencies(crazyflie_add rclcpp crazyflie_cpp)

# Make the messages generated by this package available to its targets
get_default_rmw_implementation(rmw_implementation)
find_package("${rmw_implementation}" REQUIRED)
get_rmw_typesupport(typesupport_impls "${rmw_implementation}" LANGUAGE "cpp")

foreach(typesupport_impl ${typesupport_impls})
  rosidl_target_interfaces(crazyflie_server ${PROJECT_NAME} ${typesupport_impl})
  rosidl_target_interfaces(crazyflie_add ${PROJECT_NAME} ${typesupport_impl})
endforeach()

#############
## Install ##
#############

install(TARGETS crazyflie_server crazyflie_add DESTINATION lib/${PROJECT_NAME})

install(DIRECTORY launch DESTINATION share/${PROJECT_NAME}/)

####################
## Create Package ##
####################
ament_package()

ament_export_dependencies(ament_cmake)
ament_export_include_directories(${INCLUDE_DIRS})

ament_package()

ament_export_dependencies(ament_cmake)
ament_export_include_directories(${INCLUDE_DIRS})

ament_package()
